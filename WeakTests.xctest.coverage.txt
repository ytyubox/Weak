/Users/ios.yu/Desktop/Weak/Sources/Unowned/Unowned.swift:
    1|       |//
    2|       |//  Unowned.swift
    3|       |//  
    4|       |//
    5|       |//  Created by 游宗諭 on 2019/11/24.
    6|       |//
    7|       |
    8|       |/// A type that wraps an `Object` with an `unowned` binding.
    9|       |public protocol UnownedProtocol {
   10|       |	
   11|       |	/// The object type of `Self`.
   12|       |	associatedtype UnownedObject: AnyObject
   13|       |	
   14|       |	/// The object of `self`.
   15|       |	var object: UnownedObject! { get }
   16|       |	
   17|       |}
   18|       |
   19|       |/// A wrapper around an `Object` with a `unowned` binding.
   20|       |public struct Unowned<UnowndObject: AnyObject>: UnownedProtocol, CustomStringConvertible {
   21|       |	
   22|       |	/// The object of `self`.
   23|       |	public unowned(unsafe) var object: UnowndObject!
   24|       |	
   25|       |	/// A textual representation of this instance.
   26|      1|	public var description: String {
   27|      1|		"Unowned(" + String(reflecting: object!) + ")"
   28|      1|	}
   29|       |	
   30|       |	/// Creates an instance for an object.
   31|     16|	public init(_ object: UnowndObject?) {
   32|     16|		self.object = object
   33|     16|	}
   34|       |	
   35|       |}
   36|       |extension Unowned: Hashable, Equatable where UnowndObject: Hashable {
   37|       |	
   38|       |}
   39|       |
   40|       |extension Sequence where Iterator.Element: UnownedProtocol {
   41|       |	
   42|       |	/// The objects within `self`.
   43|      1|	public var objects: [Iterator.Element.UnownedObject] {
   44|     10|		map { $0.object }
   45|      1|	}
   46|       |	
   47|       |}
   48|       |
   49|       |extension Sequence where Iterator.Element: AnyObject {
   50|       |	
   51|       |	/// return An array of unowned references to the elements in `self`.
   52|      1|	public func unowned() -> [Unowned<Iterator.Element>] {
   53|      1|		map(Unowned.init)
   54|      1|	}
   55|       |	
   56|       |}
   57|       |
   58|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   59|      2|public func === <U1, U2>(lhs: U1?, rhs: U2?) -> Bool where U1: UnownedProtocol, U2:UnownedProtocol {
   60|      2|	lhs?.object === rhs?.object
   61|      2|}
   62|       |
   63|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   64|      2|public func === <U>(lhs: U?, rhs: AnyObject?) -> Bool where U: UnownedProtocol {
   65|      2|	 lhs?.object === rhs
   66|      2|}
   67|       |
   68|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   69|      2|public func === <U>(lhs: AnyObject?, rhs: U?) -> Bool where U: UnownedProtocol {
   70|      2|	 lhs === rhs?.object
   71|      2|}
   72|       |
   73|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   74|      2|public func === <U: UnownedProtocol, W: WeakProtocol>(lhs: U?, rhs: W?) -> Bool {
   75|      2|	 lhs?.object === rhs?.object
   76|      2|}
   77|       |
   78|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   79|      2|public func !== <U1: UnownedProtocol, U2: UnownedProtocol>(lhs: U1?, rhs: U2?) -> Bool {
   80|      2|	 lhs?.object !== rhs?.object
   81|      2|}
   82|       |
   83|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   84|      2|public func !== <U>(lhs: U?, rhs: AnyObject?) -> Bool  where U: UnownedProtocol {
   85|      2|	lhs?.object !== rhs
   86|      2|}
   87|       |
   88|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   89|      2|public func !== <U>(lhs: AnyObject?, rhs: U?) -> Bool  where U: UnownedProtocol {
   90|      2|	lhs !== rhs?.object
   91|      2|}
   92|       |
   93|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   94|      2|public func !== <U, W>(lhs: U?, rhs: W?) -> Bool where U: UnownedProtocol, W: WeakProtocol {
   95|      2|	lhs?.object !== rhs?.object
   96|      2|}
   97|       |
   98|       |
   99|      0|/// Returns a Boolean value indicating whether an unowned object and an optional object are equal.
  100|      0|public func == <U>(lhs: U?, rhs: U.UnownedObject?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable {
  101|      0|	lhs?.object == rhs
  102|       |}
  103|       |
  104|      2|/// Returns a Boolean value indicating whether an optional object and an unowned object are equal.
  105|      2|public func == <U>(lhs: U.UnownedObject?, rhs: U?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable {
  106|      2|	lhs == rhs?.object
  107|       |}
  108|       |public func == <U,W>(lhs: U?, rhs: W?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable, W:WeakProtocol, U.UnownedObject == W.Weaked {
  109|      2|	lhs?.object == rhs?.object
  110|      2|}
  111|      2|
  112|       |
  113|       |/// Returns a Boolean value indicating whether an unowned object and an optional object are not equal.
  114|      0|public func != <U>(lhs: U?, rhs: U.UnownedObject?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable {
  115|      0|	lhs?.object != rhs
  116|      0|}
  117|       |
  118|       |public func != <U>(lhs: U.UnownedObject?, rhs: U?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable {
  119|      1|	lhs != rhs?.object
  120|      1|}
  121|      1|
  122|       |public func != <U, W>(lhs: U?, rhs: W?) -> Bool where U:UnownedProtocol, U.UnownedObject: Equatable, W:WeakProtocol, U.UnownedObject == W.Weaked{
  123|       |	lhs?.object != rhs?.object
  124|      1|}

/Users/ios.yu/Desktop/Weak/Sources/Weak/Weak.swift:
    1|       |/// A type that wraps an `Object` with a `weak` binding.
    2|       |public protocol WeakProtocol {
    3|       |	
    4|       |	/// The object type of `Self`.
    5|       |	associatedtype Weaked: AnyObject
    6|       |	
    7|       |	/// The object of `self`.
    8|       |	var object: Weaked? { get }
    9|       |	var isRefering:Bool {get}
   10|       |	
   11|       |}
   12|       |public struct Weak<Weaked: AnyObject>: WeakProtocol, ExpressibleByNilLiteral, CustomStringConvertible {
   13|       |	
   14|       |	/// The object of `self`.
   15|       |	public weak var object: Weaked?
   16|       |	
   17|       |	/// A textual representation of this instance.
   18|      2|	public var description: String {
   19|      2|		guard
   20|      1|			let object = object
   21|      1|			else { return "nil"}
   22|      1|		return "Weak(" + String(reflecting: object) + ")"
   23|      1|	}
   24|      0|	
   25|       |	/// Creates an instance for an optional object.
   26|       |	public init(_ object: Weaked? = nil) {
   27|     25|		self.object = object
   28|     25|	}
   29|     25|	
   30|       |	/// Creates an instance initialized with `nil`.
   31|       |	public init(nilLiteral: ()) {
   32|      1|		self.init()
   33|      1|	}
   34|      1|	
   35|       |	public var isRefering:Bool {
   36|      5|		object != nil
   37|      5|	}
   38|      5|}
   39|       |
   40|       |extension Weak: Hashable, Equatable where Weaked:Hashable {
   41|       |	
   42|       |}
   43|       |
   44|       |extension Sequence where Iterator.Element: WeakProtocol {
   45|       |	
   46|       |	/// The objects within `self`.
   47|       |	public var objects: [Iterator.Element.Weaked] {
   48|      1|		return compactMap { $0.object }
   49|     11|	}
   50|      1|	
   51|       |}
   52|       |
   53|       |extension Sequence where Iterator.Element: AnyObject {
   54|       |	
   55|       |	/// An array of weak references to the elements in `self`.
   56|       |	public var weak: [Weak<Iterator.Element>] {
   57|      1|		return map(Weak.init)
   58|      1|	}
   59|      1|}
   60|       |extension Array where Element:WeakProtocol {
   61|       |	public mutating func clearupReleased() {
   62|      1|		for (i,v) in self.enumerated().reversed() {
   63|      5|			if !v.isRefering {
   64|      5|				remove(at: i)
   65|      5|			}
   66|      5|		}
   67|      5|	}
   68|      1|}
   69|       |
   70|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   71|       |public func === <W1, W2>(lhs: W1?, rhs: W2?) -> Bool where  W1:WeakProtocol, W2:WeakProtocol {
   72|      1|	return lhs?.object === rhs?.object
   73|      1|}
   74|      1|
   75|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   76|       |public func === <W: WeakProtocol>(lhs: W?, rhs: AnyObject?) -> Bool {
   77|      1|	return lhs?.object === rhs
   78|      1|}
   79|      1|
   80|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   81|       |public func === <W: WeakProtocol>(lhs: AnyObject?, rhs: W?) -> Bool {
   82|      1|	return lhs === rhs?.object
   83|      1|}
   84|      1|
   85|       |/// Returns a Boolean value indicating whether two references point to the same object instance.
   86|       |public func === <W: WeakProtocol, U: UnownedProtocol>(lhs: W?, rhs: U?) -> Bool {
   87|      1|	return lhs?.object === rhs?.object
   88|      1|}
   89|      1|
   90|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   91|       |public func !== <W1: WeakProtocol, W2: WeakProtocol>(lhs: W1?, rhs: W2?) -> Bool {
   92|      1|	return lhs?.object !== rhs?.object
   93|      1|}
   94|      1|
   95|       |/// Returns a Boolean value indicating whether two references point to different object instances.
   96|       |public func !== <W: WeakProtocol>(lhs: W?, rhs: AnyObject?) -> Bool {
   97|      1|	return lhs?.object !== rhs
   98|      1|}
   99|      1|
  100|       |/// Returns a Boolean value indicating whether two references point to different object instances.
  101|       |public func !== <W: WeakProtocol>(lhs: AnyObject?, rhs: W?) -> Bool {
  102|      1|	return lhs !== rhs?.object
  103|      1|}
  104|      1|
  105|       |/// Returns a Boolean value indicating whether two references point to different object instances.
  106|       |public func !== <W: WeakProtocol, U: UnownedProtocol>(lhs: W?, rhs: U?) -> Bool {
  107|      1|	return lhs?.object !== rhs?.object
  108|      1|}
  109|      1|
  110|       |// Returns a Boolean value indicating whether two weak objects are equal.
  111|       |public func == <W: WeakProtocol>(lhs: W, rhs: W) -> Bool where W.Weaked: Equatable {
  112|      0|	return lhs.object == rhs.object
  113|      0|}
  114|      0|
  115|       |/// Returns a Boolean value indicating whether a weak object and an optional object are equal.
  116|       |public func == <W: WeakProtocol>(lhs: W?, rhs: W.Weaked?) -> Bool where W.Weaked: Equatable {
  117|      1|	return lhs?.object == rhs
  118|      1|}
  119|      1|
  120|       |/// Returns a Boolean value indicating whether an optional object and a weak object are equal.
  121|       |public func == <W: WeakProtocol>(lhs: W.Weaked?, rhs: W?) -> Bool where W.Weaked: Equatable {
  122|      1|	return lhs == rhs?.object
  123|      1|}
  124|      1|
  125|       |/// Returns a Boolean value indicating whether a weak object and an optional object are not equal.
  126|       |public func != <W: WeakProtocol>(lhs: W?, rhs: W.Weaked?) -> Bool where W.Weaked: Equatable {
  127|      0|	return lhs?.object != rhs
  128|      0|}
  129|      0|
  130|       |/// Returns a Boolean value indicating whether an optional object and a weak object are not equal.
  131|       |public func != <W: WeakProtocol>(lhs: W.Weaked?, rhs: W?) -> Bool where W.Weaked: Equatable {
  132|      1|	return lhs != rhs?.object
  133|      1|}

/Users/ios.yu/Desktop/Weak/Tests/WeakTests/UnownedTests.swift:
    1|       |//
    2|       |//  WeakTests.swift
    3|       |//  
    4|       |//
    5|       |//  Created by 游宗諭 on 2019/11/24.
    6|       |//
    7|       |
    8|       |import XCTest
    9|       |@testable import Weak
   10|       |
   11|       |final class UnownedTests:XCTestCase {
   12|       |	class PrintTarget{ var str:String = ""}
   13|       |	class SomeClass:NSObject {
   14|       |		var printTarget:PrintTarget
   15|       |		var text:String
   16|     13|		init(printTarget:PrintTarget, text:String) {
   17|     13|			self.printTarget = printTarget
   18|     13|			self.text = text
   19|     13|		}
   20|     13|		deinit {
   21|     13|			print(text, terminator: "", to: &printTarget.str)
   22|     13|		}
   23|       |	}
   24|       |	
   25|      1|	func testUnowned() {
   26|      1|		let testString = "deinited"
   27|      1|		let unownedRef: Unowned<SomeClass>
   28|      1|		let printTarget = PrintTarget()
   29|      1|		do {
   30|      1|			let instance = SomeClass(printTarget: printTarget, text: testString)
   31|      1|			unownedRef = Unowned(instance)
   32|      1|			XCTAssertNotNil(unownedRef.object)
   33|      1|			XCTAssertEqual("Unowned(" + String(reflecting: instance) + ")", unownedRef.description)
   34|      1|		}
   35|      1|		XCTAssertEqual(printTarget.str, testString)
   36|       |	}
   37|       |	func testUnownedForSequence() {
   38|       |		let expect = (0...9).map{_ in SomeClass(printTarget: UnownedTests.PrintTarget(), text: "")}
   39|       |		let unownedArray = expect.unowned()
   40|       |		XCTAssertEqual(expect, unownedArray.map{$0.object})
   41|       |		XCTAssertEqual(expect, unownedArray.objects)
   42|       |	}
   43|       |	
   44|       |	func testUnownEqual() {
   45|       |		let object = SomeClass(printTarget: UnownedTests.PrintTarget(), text: "")
   46|       |		let unowned1 = Unowned(object)
   47|       |		let unowned2 = Unowned(object)
   48|       |		let weak = Weak(object)
   49|       |		
   50|       |		XCTAssertTrue(unowned1 === unowned2)
   51|       |		XCTAssertTrue(unowned1 === object)
   52|       |		XCTAssertTrue(object === unowned1)
   53|       |		XCTAssertTrue(unowned1 === weak)
   54|       |		XCTAssertTrue(unowned1 == unowned2)
   55|       |		XCTAssertTrue(unowned1 == object)
   56|       |		XCTAssertTrue(object == unowned1)
   57|       |		XCTAssertFalse(unowned1 !== unowned2)
   58|       |		XCTAssertFalse(unowned1 !== object)
   59|       |		XCTAssertFalse(object !== unowned1)
   60|       |		XCTAssertFalse(unowned1 !== weak)
   61|       |		
   62|       |			
   63|       |		
   64|       |	}
   65|       |	func testOptionalUnownedEqual() {
   66|       |		let object:SomeClass? = SomeClass(printTarget: UnownedTests.PrintTarget(), text: "")
   67|       |		let unowned1:Unowned<SomeClass>? = Unowned(object)
   68|       |		let unowned2:Unowned<SomeClass>? = Unowned(object)
   69|       |		let weak:Weak<SomeClass>? = Weak(object)
   70|       |		XCTAssertTrue(unowned1 === unowned2)
   71|       |		XCTAssertTrue(unowned1 === object)
   72|       |		XCTAssertTrue(object === unowned1)
   73|       |		XCTAssertTrue(unowned1 === weak)
   74|       |		XCTAssertTrue(unowned1 == unowned2)
   75|       |		XCTAssertTrue(unowned1 == object)
   76|       |		XCTAssertTrue(object == unowned1)
   77|       |		XCTAssertTrue(unowned1 == weak)
   78|       |		XCTAssertFalse(unowned1 !== unowned2)
   79|       |		XCTAssertFalse(unowned1 !== object)
   80|       |		XCTAssertFalse(object !== unowned1)
   81|       |		XCTAssertFalse(unowned1 !== weak)
   82|       |		XCTAssertFalse(unowned1 != unowned2)
   83|       |		XCTAssertFalse(unowned1 != object)
   84|       |		XCTAssertFalse(object != unowned1)
   85|       |		XCTAssertFalse(unowned1 != weak)
   86|       |	}
   87|       |}

/Users/ios.yu/Desktop/Weak/Tests/WeakTests/WeakTests.swift:
    1|       |import XCTest
    2|       |@testable import Weak
    3|       |
    4|       |final class WeakTests: XCTestCase {
    5|       |	class SomeClass:NSObject { }
    6|       |	
    7|      1|	func testWeakInit() {
    8|      1|		let weak:Weak<SomeClass> = nil
    9|      1|		XCTAssertNil(weak.object)
   10|      1|	}
   11|      1|	func testWeak() {
   12|      1|		let weakRef: Weak<SomeClass>
   13|      1|		do {
   14|      1|			let instance = SomeClass()
   15|      1|			weakRef = Weak(instance)
   16|      1|			XCTAssertNotNil(weakRef.object)
   17|      1|		}
   18|      1|		XCTAssertNil(weakRef.object)
   19|      1|	}
   20|      1|	func testSetClearupReleased() {
   21|      1|		var list = Array<Weak<SomeClass>>()
   22|      5|		for _ in 0...4 {
   23|      5|			let instance = SomeClass()
   24|      5|			let weakRef = Weak(instance)
   25|      5|			list.append(weakRef)
   26|      5|		}
   27|      1|		list.clearupReleased()
   28|      1|		XCTAssertEqual(list.count, 0)
   29|      1|	}
   30|      1|	func testWeakSequence() {
   31|      1|		let origin = (0...10)
   32|     11|		let objectList = origin.map{_ in SomeClass()}
   33|      1|		let weakList = objectList.weak
   34|      1|		XCTAssertEqual(weakList.count, origin.count)
   35|      1|		XCTAssertEqual(weakList.objects, objectList)
   36|      1|	}
   37|      1|	func testWeak3Equal() {
   38|      1|		let object = SomeClass()
   39|      1|		let w1 = Weak(object)
   40|      1|		var w2 = Weak(object)
   41|      1|		var unowned = Unowned(object)
   42|      1|		XCTAssertTrue(w1 === w2)
   43|      1|		XCTAssertTrue(w1 === object)
   44|      1|		XCTAssertTrue(object === w1)
   45|      1|		XCTAssertTrue(w1 === unowned)
   46|      1|		let object2 = SomeClass()
   47|      1|		w2.object = object2
   48|      1|		unowned.object = object2
   49|      1|		
   50|      1|		XCTAssertTrue(w1 !== w2)
   51|      1|		XCTAssertTrue(w1 !== object2)
   52|      1|		XCTAssertTrue(object2 !== w1)
   53|      1|		XCTAssertTrue(w1 !== unowned)
   54|      1|	}
   55|       |	
   56|      1|	func testWeakString() {
   57|      1|		let weakRef: Weak<SomeClass>
   58|      1|
   59|      1|		do {
   60|      1|			let instance = SomeClass()
   61|      1|			weakRef = Weak(instance)
   62|      1|			
   63|      1|			XCTAssertEqual(weakRef.description, "Weak(\(String(reflecting: instance)))")
   64|      1|		}
   65|      1|		XCTAssertEqual(weakRef.description, "nil")
   66|      1|	}
   67|       |	func testWeakOptionalEquel() {
   68|       |		let someObject = SomeClass()
   69|       |		let weakRef1:Weak<SomeClass>? = Weak(someObject)
   70|       |		let weakRef2:Weak<SomeClass>? = Weak(someObject)
   71|       |		XCTAssertTrue(weakRef1 == weakRef2)
   72|       |		XCTAssertTrue(weakRef1 == someObject)
   73|       |		let optionalObjcet:SomeClass? = someObject
   74|       |		XCTAssertTrue(optionalObjcet == weakRef1)
   75|       |		XCTAssertFalse(weakRef1 != weakRef2)
   76|       |		XCTAssertFalse(weakRef1 != optionalObjcet)
   77|       |		XCTAssertFalse(optionalObjcet != weakRef1)
   78|       |	}
   79|       |}

